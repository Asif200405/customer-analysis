# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

from google.colab import files
uploaded=files.upload()

import pandas as pd

# Use read_excel because the file is in .xlsx format
df = pd.read_excel('customer.csv.xlsx')

# Check for null values in each column
print(df.isnull().sum())

import pandas as pd

# Load the Excel file
df = pd.read_excel('customer.csv.xlsx')

# Check for duplicate rows
print("Number of duplicate rows:", df.duplicated().sum())

# Display duplicate rows
print

import pandas as pd

# Load the Excel file
df = pd.read_excel('customer.csv.xlsx')

# Fill all missing values with a specific value (e.g., "Unknown")
df_filled = df.fillna("Unknown")

# OR: Fill missing values in a specific column (e.g., 'Name') with a default
# df['Name'] = df['Name'].fillna('No Name')

# OR: Fill numerical columns with the column mean
# df['Age'] = df['Age'].fillna(df['Age'].mean())

# Print the DataFrame with filled values
print(df_filled)

import pandas as pd

# Load the Excel file
df = pd.read_excel('customer.csv.xlsx')

# Replace 0 with "No" and 1 with "Yes" across the whole DataFrame
df_binary_converted = df.replace({0: "No", 1: "Yes"})

# OR: Replace binary values in a specific column (e.g., 'Subscribed')
# df['Subscribed'] = df['Subscribed'].replace({0: "No", 1: "Yes"})

# Print the updated DataFrame
print(df_binary_converted)

import matplotlib.pyplot as plt
import seaborn as sns

# Count how many times each product was purchased
product_counts = df.drop(columns='Transaction_ID').sum().sort_values(ascending=False)

# 1. Bar plot of product purchase frequency
plt.figure(figsize=(10, 6))
sns.barplot(x=product_counts.values, y=product_counts.index, palette='viridis')
plt.title('Product Purchase Frequency')
plt.xlabel('Number of Transactions')
plt.ylabel('Product')
plt.tight_layout()
plt.show()

# 2. Heatmap of item co-occurrence
correlation_matrix = df.drop(columns='Transaction_ID').corr()

plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Product Purchase Correlation Heatmap')
plt.show()